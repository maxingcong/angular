前端利用表单 填写编辑数据
    在控制器中  （相应的js 文件）写入事件方法，和对应的请求
    
   在服务器文件中  查找对应请求的方法 ，方法内对应数据库的操作方法
  （在服务器中相应的请求有路由控制，现在比较流行的路由方法是  RESTfull），服务器端 创建了服务后 服务器监听到请求  路由模块（route）启动 路由模块对于应数据库的 增/删/改/查的 方法    或者返回相应的ejs 模板  
        


使用node  express后台框架 快速搭建服务器  

 为什么要应用服务器？

当你开发了一个服务端应用程序，部署到服务器之后，需要一个针对这个应用程序的执行环境，而不是将代码放到服务器上就能运行。

你需要将Java的JVM或者.NET的CLR运行起来执行你的应用程序；如果是Web应用程序，需要接收用户通过浏览器发出来的请求，并且能将处理结果返回给浏览器。。。

所以，服务器上仅有操作系统是不够的，还需要相应的应用程序执行环境，最好能有提供执行环境、方便应用程序运行的专用服务器，于是应用服务器应运而生。

如果你是用Java开发的服务端应用程序，不管服务器用的是什么操作系统，只要安装一个Java应用服务器就行了，比如这里提到的WebLogic。

如果你是用.NET开发的服务端应用程序，如果服务器用的是Windows，你需要安装IIS，安装.NET Framework；如果服务器用的是Linux，您需要安装Apache，安装Mono，安装Apache Mono模块。如果有跨平台的.NET应用服务器，比如叫NWeblogLogic，不管服务器用的是什么操作系统，只要安装NWeblogLogic，就能跑.NET应用程序，是不是更幸福一些。



Web服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，Web服务器的基本功能就是提供Web信息浏览服务。它只需支持HTTP协议、HTML文档格式及URL，与客户端的网络浏览器配合。

大多数 web 服务器都支持服务端的脚本语言（php、python、ruby）等，并通过脚本语言从数据库获取数据，将结果返回给客户端浏览器。

目前最主流的三个Web服务器是Apache、Nginx、IIS。


Node.js 提供了 http 模块，http 模块主要用于搭建 HTTP 服务端和客户端，使用 HTTP 服务器或客户端功能必须调用 http 模块，


指定好端口 ，服务器协议  ，创建路由（RESTfull），路由相对数据库命令

使用mongoDB对 js 友好的数据库
   mongo的api 很多可以使用mongo的api     启动数据库服务，指定数据库目录日志目录， 创建数据库操作命令集，
  服务器启动文件中引入数据库链接命令    



前端使用 angular 实现单页面应用及数据的双向绑定  前端通过事件触发请求，建立与服务器链接，服务器 后台代码监听到路由 跳转到数据库查询响应数据，数据库返回查询数据  到服务器 服务器返回数据 断开链接
